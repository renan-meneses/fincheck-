version: '3.8'

services:
  # Serviço do Backend
  backend:
    container_name: fincheck-backend
    build:
      context: ./api
    ports:
      - "3000:3000" # A porta do backend, adapte conforme necessário
    volumes:
      - ./api:/app
    environment:
      - DATABASE_URL="postgresql://docker:docker@localhost:5433/postgresql?schema=public"
      - JWT_SECRET=fincheckapi
      - RESET_PASSWORD_JWT_SECRET=resetpasswordfincheckapi
      - FRONTEND_URL="http://localhost:5173"
      - EMAIL_USER=email@example.com
      - EMAIL_PASSWORD=emailexamplepassword
    depends_on:
      - db
    networks:
      - fincheck-network
    command: >
      bash -c "npm install && npx prisma migrate dev && npm run start:dev"

  # Serviço do Frontend
  frontend:
    container_name: fincheck-frontend
    build:
      context: ./frontend
    ports:
      - "3001:3000" # A porta do frontend, adapte conforme necessário
    volumes:
      - ./frontend:/app
    environment:
      - VITE_API_URL=http://localhost:3000

    networks:
      - fincheck-network
    command: >
      bash -c "npm install && npm run dev"

  # Serviço do banco de dados (usando Postgres como exemplo)
  db:
    container_name: fincheck-db
    image: postgres:13 # Adapte a versão conforme necessário
    environment:
      - POSTGRES_USER=fincheckuser
      - POSTGRES_PASSWORD=fincheckpass
      - POSTGRES_DB=fincheckdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fincheck-network
    ports:
      - "5432:5432" # Porta do PostgreSQL, pode ser alterada conforme a configuração

  # Serviço para o Redis (caso o projeto use Redis)
  redis:
    container_name: fincheck-redis
    image: redis:alpine
    ports:
      - "6379:6379" # Porta do Redis
    networks:
      - fincheck-network

# Volumes para persistência de dados
volumes:
  postgres_data:

# Redes internas para comunicação entre os serviços
networks:
  fincheck-network:
    driver: bridge
